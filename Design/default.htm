<html>

    <head>
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <title>Atlanta Lending Library - Design</title>
    </head>

    <body>

        <div class="content">

            <h1>Atlanta Lending Library - Design</h1>
            
            <h2>Introduction</h2>
            
            <p>
                The Atlanta project started life as an example of how to use NHibernate
                and Spring.Net.  It has evolved into a sample application of how to combine
                best practice techniques and best of breed technologies to create an application.
            </p>
            <p>
                The project currently uses the following technologies:
            </p>
            <ul>
                <li>NAnt;</li>
                <li>NUnit;</li>
                <li>NHibernate;</li>
                <li>Spring.Net;</li>
                <li>Silverlight;</li>
                <li>NCover;</li>
                <li>Firebird (RDBMS).</li>
            </ul>
            
            <p>
                This remaining sections of this document describe the Development Methodology,
                Architecture (patterns and implementation),
                and functional design of the Atlanta Lending Library.
            </p>

            <h2>Development Methodology</h2>
            <p>
                The development on Atlanta does not subscribe to a single methodology (e.g., XP, SCRUM)
                but instead borrows techniques from methodologies in the Agile/Lean arena.
            </p>
            <p>
                In addition, the nature of development on an example project doesn't lend itself
                to the sort of pressures and deadlines that demonstrate the advantages of Agile
                practices in the field.
                As such, the development of Atlanta sticks to the core principals of:
            </p>
            <ul>
                <li>Test Driven Development (TDD);</li>
                <li>Continuous Integration (CI);</li>
                <li>Collective Code Ownership;</li>
                <li>Aggressive Refactoring.</li>
            </ul>
            <p>
                We have a suite of tests using NUnit, an automated build using NAnt,
                built in test-coverage checked in the build using NCover, and we endeavour
                to ensure that every Subversion check-in results in a working end-to-end build.
            </p>
            <p>
                In reality we normally subscribe to any of a range of techniques when creating software,
                including:
            </p>
            <ul>
                <li>Iterative and Incremental Development (IID);
                    <ul><li>with preference to shorter iterations - e.g., 1 week</li></ul></li>
                <li>Time Boxing;</li>
                <li>Requirements Freeze;</li>
                <li>Sustainable Development;</li>
                <li>Pair Programming;</li>
                <li>e.t.c., ...</li>
            </ul>

            <h2>Architecture</h2>
                <h3>Architecture Patterns</h3>
                <h3>Architecture Implementation</h3>

            <h2>Analysis Model</h2>

            <h2>Use Cases</h2>

        </div>

    </body>

</html>

